#+TITLE:cmake入门
#+OPTIONS: ^:nil


* 为什么使用cmake？

  1) 跨平台
     对于给定的一份基于cmake的c/c++源码，在类unix平台可以生成makefile，在mac平台可以生成xcode项目文件，在windows平台可以生成msvc工程文文件。比如sip通讯库，要提供windows、ios、安卓三个平台。
     当前的解决方案是每个平台各自一个工程，虽然代码是一样，但是却有多分拷贝，各自维护。如若功能扩展，bug修复。那么三份拷贝要同步修改，带来维护成本。
  2) 支持源码外构建
     vs解决方案，在构建时会生成很多临时文件，*.obj *.tlog *.dll *.lib.这些临时文件很容易污染源码的组织，尤其是在提交svn的时候，如果不去细心区别哪个是必须要提交的，哪些是临时文件，则很容易误提交，
     污染项目svn仓库，让人无法确认哪些是工程必须文件，哪些不是，给人疑惑，给代码修改对比带来精力的浪费。虽然可以对每个vs工程进行详细配置，将临时文件重定向到一个专门的目录，但是修改配置是一份繁琐的
     工作，配置了这个工程，忘了配置那个工程，配置的debug忘了release，配置了win32版本，忘记了64位版本。如果不能一次到位，一会增加svn的鸡肋提交记录，二是反复的配置过程容易让人失去耐心，大大降低工作
     相率。
     cmake的源码外构建。借助cmake，项目源码与工程构建过程生成的临时文件，目标文件，严格分开。源码是源码，构建是构建。提交svn时，只需提交源码即可，修改了什么，增加了什么一目了然，也不会发生文件误
    提交的失误。临时文件不再污染项目源码，使源码一直保持干净的组织结构。
  3) 降低工程体积大小,方便工程维护
     当前项目，由于大部分工程都没有进行良好的配置，所以就在svn上传了很多临时文件，而临时文件往往都很多很大。另一方面，多个项目之间共享一个类库（include lib dll），于是每个项目都会存一份这个类库的副本
     上传到svn。增加了svn服务器的存储压力，二是增加拉取代码的时候延长拉取时间，对网速要求较高。 利用cmake，在cmake文件编写逻辑良好的情况下，可以将一个500m的项目，降低到500k。以前提交到svn是一个500m大
    小的工程，利用cmake，提交到svn的工程可以减小到500k。由于共享类库这个副本的存在，导致项目维护成本提高.假如类库有版本更新，bug修复，那么凡是用到这个类库的项目都要同步的替换掉旧的dll lib include。
    一是工作量大，二是容易丢三落四，改了这个忘了那个。利用cmake，可以让多个项目共享同一个类库，如果类库有更新只需要修改CMakeLists.txt即可(甚至都不用修改)

* cmake学习成本
  当前cmake的教程，尤其是中文教程，相对较少。如果不看官方的tutorial，很难缕出一个头绪来。但是实际上，cmake语法还是非常简单的，并且有很多编辑器自带语法提示。cmake命令很多，但是常用的却很固定，就好比
  c++标准库，内容很多，接口很多，但是常用的却只占其中很少一部分。完全可以在短时间内掌握。网上亦有cmake手册的中文翻译（[[http://www.cnblogs.com/coderfenghc/tag/cmake/][cmake中文手册]]）

  再次说明,使用cmake不是在增加负担,相反,它是减少我们的负担,让我们的工作更顺畅,用最少的事件做最优秀的事,不挖坑,也不让自己
踩自己以前挖的坑.

* 使用cmake
** 构建一个exe
*** 源码
    源码目录
    #+BEGIN_VERSE
      helloworld_project
         ├── build_dir
         ├── CMakeLists.txt
         └── main.cpp
    #+END_VERSE
    main.cpp
    #+BEGIN_SRC c++
     int main(int argc, const char *argv[])
     {
         printf("helloworld");
         return 0;
     }
    #+END_SRC
    CMakeLists.txt
    #+BEGIN_SRC cmake
     # #是注释
     # 每个项目的第一行都要加这个，指定该项目依赖的cmake工具的最低版本
     cmake_minimum_required(VERSION 3.4)
     #项目名称
     project(helloword)

     # 设置变量用set(key value) 引用变量用${key}
     set(my_exe_name helloworld)

     # 生成一个exe 用add_executable(exe_name srcfiles)
     add_executable(${my_exe_name} main.cpp)
    #+END_SRC
   构建命令：生成sln工程（windows），makefile（linux）
   #+BEGIN_SRC sh
   > cd buidl_dir
   # cmake CMakeLists.txts所在路径
   > cmake ..
   #+END_SRC
   至此，一个sln工程就算构建好了，可以打开helloword.sln进行编译调试.

   如果你的电脑上既有vs2010，又有vs2015，还可以指定使用vs2010还是vs2015 编译
   #+BEGIN_SRC cmake
   # 2010
   > cmake -G"Visual Studio 10"
   # 2010 64位版本
   > cmake -G"Visual Studio 10 Win64"
   # 2015
   > cmake -G"Visual Studio 14 2015"
   #+END_SRC
*** 总结
    生成exe就用add_executable
** 构建一个lib
*** 源码
    源码目录
    #+BEGIN_VERSE
    libsum
      ├── CMakeLists.txt
      ├── sum.cpp
      └── sum.h
    #+END_VERSE
    sum.cpp
    #+BEGIN_SRC c++
    int sum(int x, int y)
    {
      return x + y;
    }
    #+END_SRC
    sum.h
    #+BEGIN_SRC c++
    #ifndef SUM_H
    #define SUM_H
    extern int sum(int x, int y);
    #endif
    #+END_SRC
    CMakeLists.txt
    #+BEGIN_SRC cmake
    cmake_minimum_required(VERSION 3.4)
    project(libsum)
    # 静态库需指定STATIC关键字
    # 语法 add_library(libname STATIC some.cpp some.h)
    add_library(libsum STATIC sum.cpp sum.h)
    #+END_SRC
   构建命令：生成sln工程（windows），makefile（linux）
   #+BEGIN_SRC sh
   > cd buidl_dir
   # cmake CMakeLists.txts所在路径
   > cmake ..
   #+END_SRC
   至此，一个sln工程就算构建好了，可以打开libsum.sln进行编译调试.

   如果你的电脑上既有vs2010，又有vs2015，还可以指定使用vs2010还是vs2015 编译
   #+BEGIN_SRC cmake
   # 2010
   > cmake -G"Visual Studio 10"
   # 2015
   > cmake -G"Visual Studio 14"
   #+END_SRC
*** 总结
    生成静态库就用add_library
** 构建一个dll
*** 源码
    源码目录
    #+BEGIN_VERSE
    libsub
      ├── CMakeLists.txt
      ├── sub.cpp
      └── sub.h
    #+END_VERSE
    sub.cpp
    #+BEGIN_SRC c++
    #include "sub.h"
    int sub(int x, int y)
    {
      return x - y;
    }
    #+END_SRC
    sub.h
    #+BEGIN_SRC c++
    #ifndef SUM_H
    #define SUM_H
    extern int __declspec(dllexport) sub(int x, int y);
    #endif
    #+END_SRC
    CMakeLists.txt
    #+BEGIN_SRC cmake
    cmake_minimum_required(VERSION 3.4)
    project(shared_sub)
    # 动态库需指定SHARED关键字
    add_library(libsub SHARED sub.cpp sub.h)
    #+END_SRC
   构建命令：生成sln工程（windows），makefile（linux）
   #+BEGIN_SRC sh
   > cd buidl_dir
   # cmake CMakeLists.txts所在路径
   > cmake ..
   #+END_SRC
   至此，一个sln工程就算构建好了，可以打开shared_sub.sln进行编译调试.

   如果你的电脑上既有vs2010，又有vs2015，还可以指定使用vs2010还是vs2015 编译
   #+BEGIN_SRC cmake
   # 2010
   > cmake -G"Visual Studio 10"
   # 2015
   > cmake -G"Visual Studio 14"
   #+END_SRC
*** 总结
    生成动态库就用add_library
** 如何让一个exe使用静态库和动态库
*** 源码
    源码目录
    #+BEGIN_VERSE
    helloworld_project
      ├── CMakeLists.txt
      ├── libsub
      │      ├── CMakeLists.txt
      │      ├── sub.cpp
      │      └── sub.h
      ├── libsum
      │      ├── CMakeLists.txt
      │      ├── sum.cpp
      │      └── sum.h
      └── main.cpp
    #+END_VERSE
    main.cpp
    #+BEGIN_SRC c++
    #include <sub.h>
    #include <sum.h>

    int main(int argc, const char *argv[])
    {
        auto _sum = sum(1,3);
        auto _sub = sub(4, 3);
        return 0;
    }
    #+END_SRC
    hello_world_project/CMakeLists.txt
    #+BEGIN_SRC cmake
    cmake_minimum_required(VERSION 3.4)

    project(hello_world)

    #包含进libsub源码
    add_subdirectory(libsub)
    #包含进libsum源码
    add_subdirectory(libsum)

    #where is sum.h
    include_directories(libsum)
    #where is sub.h，设置头文件的包含路径
    include_directories(libsub)
    #生成exe
    add_executable(hello_world main.cpp)
    # 链接  hello_world.exe libsum.lib libsub.lib
    target_link_libraries(hello_world libsum libsub)
    #+END_SRC
*** 总结
    add_subdirectory():用来包含子级目录

    include_directories():如果要使用一个库，必然要引用这个库的头文件，这个命令用来设置头文件的路径

    target_link_libraries():程序的生成分为编译阶段，链接阶段。这个命令用来将依赖的库和生成目标进行链接

    add_executable()用来生成exe
** 使用一个不是基于源码构建的第三方库
*** 说明
    当不是使用源码构建，很难做到既支持2010 又支持2015。

    如果使用的.lib .dll是用vs2010编译出来的，那么很自然的就不能支持2015了. 如果都想支持，可以从源码构建，或者在cmake文件里分别配置

    这里以使用log4cxx为例
*** 源码
    源码目录
    #+BEGIN_VERSE
    helloworld_project
      ├── CMakeLists.txt
      ├── libsub
      │   ├── CMakeLists.txt
      │   ├── sub.cpp
      │   └── sub.h
      ├── libsum
      │   ├── CMakeLists.txt
      │   ├── sum.cpp
      │   └── sum.h
      ├── main.cpp
      └── thrd
          └── log4cxx
              ├── bin
              │   ├── log4cxxd.dll
              │   └── log4cxx.dll
              ├── lib
              │   ├── log4cxxd.lib
              │   └── log4cxx.lib
              └── log4cxx
                  ├── appender.h
                  ├── appenderskeleton.h
    #+END_VERSE
    main.cpp
    #+BEGIN_SRC c++
    #include <sub.h>
    #include <sum.h>
    int main(int argc, const char *argv[])
    {
        auto _sum = sum(1,3);
        auto _sub = sub(4, 3);
        return 0;
    }
    #+END_SRC
    hello_world_project/CMakeLists.txt
    #+BEGIN_SRC cmake
    cmake_minimum_required(VERSION 3.4)
    project(hello_world)
    #包含进libsub源码
    add_subdirectory(libsub)
    #包含进libsum源码
    add_subdirectory(libsum)
    #where is sum.h
    include_directories(libsum)
    #where is sub.h，设置头文件的包含路径
    include_directories(libsub)
    #logcxx
    include_directories(thrd/log4cxx)
    #where is log4cxx.lib and log4cxxd.lib
    link_directories(thrd/log4cxx/lib)
    #生成exe
    add_executable(hello_world main.cpp)
    # 链接  hello_world.exe libsum.lib libsub.lib
    target_link_libraries(hello_world libsum libsub $<$<CONFIG:Release>:log4cxx>)
    target_link_libraries(hello_world libsum libsub $<$<CONFIG:Debug>:log4cxxd>)
    #+END_SRC
*** 总结
    link_directories() 用来查找lib的路径
** cmake 目录结构
   一般采用cmake构建项目的话,会分为两种目录,一种是源码目录,另一种是构建目录.源码目录也就是存放源码的那个目录,而构建目录则是用来构建工程用的,
也就是build目录.对于这两个目录,cmake都有对应的内置变量用来描述,以方便使用.
**** 源码目录
***** CMAKE_SOURCE_DIR
      这是是源码的根目录,也就是最顶级目录.
***** CMAKE_CURRENT_SOURCE_DIR
      这个是CMakeLists.txt当前所在目录.
    #+BEGIN_VERSE
    helloworld_project
      ├── CMakeLists.txt
      ├── libsub
      │      ├── CMakeLists.txt
      │      ├── sub.cpp
      │      └── sub.h
      ├── libsum
      │      ├── CMakeLists.txt
      │      ├── sum.cpp
      │      └── sum.h
      └── main.cpp
    #+END_VERSE
    比如上面的目录级别.项目的根目录是helloworld_project,所以CMAKE_SOURCE_DIR就是指的这个目录.至于CMAKE_CURRENT_SOURCE_DIR呢,这个就比较多变了.

    对于 hello_world_project/CMakeLists.txt:CMAKE_CURRENT_SOURCE_DIR 就是helloworld_project

    对于 hello_world_project/libsub/CMakeLists.txt:CMAKE_CURRENT_SOURCE_DIR 就是helloworld_project/libsub

    对于 hello_world_project/libsum/CMakeLists.txt:CMAKE_CURRENT_SOURCE_DIR 就是helloworld_project/libsum
***** CMAKE_PROJECT_DIR
      cmake项目所在目录,这个是针对源码目录的.即定义了project(hello_world)命令的那个CMakeList.txt所在目录
**** 构建目录
***** CMAKE_BINARY_DIR
      这个是构建目录的跟目录,也就是build目录.
***** CMAKE_CURRENT_BINARY_DIR:
      这个跟CMAKE_CURRENT_SOURCE_DIR是差不多的,只不过是针对build目录

    对于 hello_world_project/CMakeLists.txt:CMAKE_CURRENT_BINARY_DIR 就是build(也就是构建目录的跟目录)

    对于 hello_world_project/libsub/CMakeLists.txt:CMAKE_CURRENT_BINARY_DIR 就是build/libsub

    对于 hello_world_project/libsum/CMakeLists.txt:CMAKE_CURRENT_BINARY_DIR 就是build/libsum
** CMAKE常用变量
*** 变量
**** MSVC
     如果是当前编译环境是windows,那么MSVC为true
     #+BEGIN_SRC cmake
     if(MSVC)
        message(STATUS "current system is windows")
     endif()
     #+END_SRC
**** MSVC_VERSION
     可以获得msvc的版本,利用这个变量,我们可以知道是用2010编译的还是2015编译的.假如我们的程序只支持2015,
     如果有人用2010编译,我们可以检测这个变量,然后抛出异常,提示用户"不支持2010"
**** CMAKE_SIZEOF_VOID_P
     用来判断是编译的32位版本程序,还是编译的64位程序
     #+BEGIN_SRC cmake
     if(CMAKE_SIZEOF_VOID_P STREQUAL 8)
        message(STATUS "current platform is 64 bit")
     else()
        message(STATUS "current platform is 32 bit")
     endif()
     #+END_SRC
**** CMAKE_DEBUG_POSFIX
     对于windows的库命名习惯,一般都是在debug版本的名字上加入后缀,比如d,D.
     #+BEGIN_VERSE
     release:libcurl.dll
     debug:libcurld.dll
     #+END_VERSE
     所以我们可以通过这个变量来指定编译debug版本的生成后缀.这个对exe不生效,仅仅对库生效
     #+BEGIN_SRC cmake
     set(CMAKE_DEBUG_POSFIX d)
     #+END_SRC
     当这样设置后,后面如果编译debug版本的目标时,会自动加上这个后缀.比如上面的libsub,release版本是libsub.lib,
     debug版本是libsubd.lib
**** CMAKE_BUILD_TYPE
     这个比较有用.它一共有四个值,不过我们常用的就两个,一个是Debug,一个是Release.
     建议这个最开始就会设置上,明确指定要编译哪个版本的项目,如果不设置,就没办法使用这个变量
     #+BEGIN_SRC cmake
     #编译Debug版本
     set(CMAKE_BUILD_TYPE Debug)
     #编译Release版本
     set(CMAKE_BUILD_TYPE Release)
     #不过,按照习惯,都是默认指定为Release.即,按如下使用
     if(NOT CMAKE_BUILD_TYPE)
      set(CMAKE_BUILD_TYPE Release)
     endif()
     #+END_SRC
     CMAKE_BUILD_TYPE默认是不存在的,必须显式赋值才行
** 如何安装
   我们知道,makefile一般都会有一个make install.而cmake也可以提供这样的功能.而且这是一样常用且有用的功能.

   比如我们自己写了一个动态库.提供给别人用,那么我需要为对方提供include,dll,lib三样东西.难道我们要手动的拷贝出
这三个东西给别人吗,一次还行.要是经常有更新,那就是件啰嗦惹人厌烦的事,而且还容易出错.

  比如我们的校宣终端程序,bin目录下面要有*.dll, hdmapp.exe, config, tools, resource.我们之前是怎么处理的呢,
  Debug下面有个config,tools, release下面也有config,tools.还有一些肯定不对变动的dll.这些内容会一起提交到svn.
这是一件很糟糕的事情.加入config的某一个config.json有变动,我们需要修改两个地方,大部分情况下,我们都会忘记修改,
等到实际用的时候,才发现没有修改到位,于是赶紧修复.这是很降低效率并且是一件不那么流畅的事,因为i没有一步到位.然后利用cmake,
我们可以很轻松的处理这件事.我会利用上面的cmake_preoject来说明它的好处.
*** install命令
** 版本管理
** 引用github上面的c++项目
** 条件编译
** 设置编译属性和连接属性
** 设置目标属性
** 安装
** 单元测试集成
** qt使用cmake
